/*
 * This file is generated by jOOQ.
 */
package org.poem.entities.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.poem.entities.Indexes;
import org.poem.entities.Keys;
import org.poem.entities.Kylo;
import org.poem.entities.tables.records.DsgGatherInfoRecord;


/**
 * 元数据采集信息
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DsgGatherInfo extends TableImpl<DsgGatherInfoRecord> {

    private static final long serialVersionUID = -877766674;

    /**
     * The reference instance of <code>kylo.dsg_gather_info</code>
     */
    public static final DsgGatherInfo DSG_GATHER_INFO = new DsgGatherInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DsgGatherInfoRecord> getRecordType() {
        return DsgGatherInfoRecord.class;
    }

    /**
     * The column <code>kylo.dsg_gather_info.id</code>. id
     */
    public final TableField<DsgGatherInfoRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "id");

    /**
     * The column <code>kylo.dsg_gather_info.name</code>. 连接的名字
     */
    public final TableField<DsgGatherInfoRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "连接的名字");

    /**
     * The column <code>kylo.dsg_gather_info.ip</code>. 连接ip
     */
    public final TableField<DsgGatherInfoRecord, String> IP = createField("ip", org.jooq.impl.SQLDataType.VARCHAR(500), this, "连接ip");

    /**
     * The column <code>kylo.dsg_gather_info.port</code>. 连接的端口
     */
    public final TableField<DsgGatherInfoRecord, String> PORT = createField("port", org.jooq.impl.SQLDataType.VARCHAR(500), this, "连接的端口");

    /**
     * The column <code>kylo.dsg_gather_info.user</code>. 数据库连接的用户名字
     */
    public final TableField<DsgGatherInfoRecord, String> USER = createField("user", org.jooq.impl.SQLDataType.VARCHAR(500), this, "数据库连接的用户名字");

    /**
     * The column <code>kylo.dsg_gather_info.password</code>. 数据库连接的密码
     */
    public final TableField<DsgGatherInfoRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(500), this, "数据库连接的密码");

    /**
     * The column <code>kylo.dsg_gather_info.type</code>. 数据库类型 mysql或者是 orcale
     */
    public final TableField<DsgGatherInfoRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(500), this, "数据库类型 mysql或者是 orcale");

    /**
     * The column <code>kylo.dsg_gather_info.service_name</code>. oracle 服务名字
     */
    public final TableField<DsgGatherInfoRecord, String> SERVICE_NAME = createField("service_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "oracle 服务名字");

    /**
     * The column <code>kylo.dsg_gather_info.remark</code>. 描述
     */
    public final TableField<DsgGatherInfoRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.VARCHAR(500), this, "描述");

    /**
     * The column <code>kylo.dsg_gather_info.delete</code>. 是否删除
     */
    public final TableField<DsgGatherInfoRecord, Byte> DELETE = createField("delete", org.jooq.impl.SQLDataType.TINYINT, this, "是否删除");

    /**
     * The column <code>kylo.dsg_gather_info.create_time</code>.
     */
    public final TableField<DsgGatherInfoRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>kylo.dsg_gather_info.update_time</code>.
     */
    public final TableField<DsgGatherInfoRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>kylo.dsg_gather_info</code> table reference
     */
    public DsgGatherInfo() {
        this(DSL.name("dsg_gather_info"), null);
    }

    /**
     * Create an aliased <code>kylo.dsg_gather_info</code> table reference
     */
    public DsgGatherInfo(String alias) {
        this(DSL.name(alias), DSG_GATHER_INFO);
    }

    /**
     * Create an aliased <code>kylo.dsg_gather_info</code> table reference
     */
    public DsgGatherInfo(Name alias) {
        this(alias, DSG_GATHER_INFO);
    }

    private DsgGatherInfo(Name alias, Table<DsgGatherInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private DsgGatherInfo(Name alias, Table<DsgGatherInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("元数据采集信息"));
    }

    public <O extends Record> DsgGatherInfo(Table<O> child, ForeignKey<O, DsgGatherInfoRecord> key) {
        super(child, key, DSG_GATHER_INFO);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Kylo.KYLO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DSG_GATHER_INFO_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DsgGatherInfoRecord> getPrimaryKey() {
        return Keys.KEY_DSG_GATHER_INFO_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DsgGatherInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<DsgGatherInfoRecord>>asList(Keys.KEY_DSG_GATHER_INFO_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DsgGatherInfo as(String alias) {
        return new DsgGatherInfo(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DsgGatherInfo as(Name alias) {
        return new DsgGatherInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DsgGatherInfo rename(String name) {
        return new DsgGatherInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DsgGatherInfo rename(Name name) {
        return new DsgGatherInfo(name, null);
    }
}
