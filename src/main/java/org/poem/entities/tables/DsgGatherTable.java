/*
 * This file is generated by jOOQ.
 */
package org.poem.entities.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.poem.entities.Indexes;
import org.poem.entities.Keys;
import org.poem.entities.Kylo;
import org.poem.entities.tables.records.DsgGatherTableRecord;


/**
 * 采集表信息
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DsgGatherTable extends TableImpl<DsgGatherTableRecord> {

    private static final long serialVersionUID = -910972449;

    /**
     * The reference instance of <code>kylo.dsg_gather_table</code>
     */
    public static final DsgGatherTable DSG_GATHER_TABLE = new DsgGatherTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DsgGatherTableRecord> getRecordType() {
        return DsgGatherTableRecord.class;
    }

    /**
     * The column <code>kylo.dsg_gather_table.id</code>. id
     */
    public final TableField<DsgGatherTableRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "id");

    /**
     * The column <code>kylo.dsg_gather_table.gather_db_id</code>. 元数据数据库信息
     */
    public final TableField<DsgGatherTableRecord, String> GATHER_DB_ID = createField("gather_db_id", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "元数据数据库信息");

    /**
     * The column <code>kylo.dsg_gather_table.table</code>. 数据库表
     */
    public final TableField<DsgGatherTableRecord, String> TABLE = createField("table", org.jooq.impl.SQLDataType.VARCHAR(500), this, "数据库表");

    /**
     * The column <code>kylo.dsg_gather_table.table_name</code>. 数据库表名字
     */
    public final TableField<DsgGatherTableRecord, String> TABLE_NAME = createField("table_name", org.jooq.impl.SQLDataType.VARCHAR(500), this, "数据库表名字");

    /**
     * The column <code>kylo.dsg_gather_table.comment</code>. 描述
     */
    public final TableField<DsgGatherTableRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "描述");

    /**
     * The column <code>kylo.dsg_gather_table.create_time</code>.
     */
    public final TableField<DsgGatherTableRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>kylo.dsg_gather_table.update_time</code>.
     */
    public final TableField<DsgGatherTableRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>kylo.dsg_gather_table</code> table reference
     */
    public DsgGatherTable() {
        this(DSL.name("dsg_gather_table"), null);
    }

    /**
     * Create an aliased <code>kylo.dsg_gather_table</code> table reference
     */
    public DsgGatherTable(String alias) {
        this(DSL.name(alias), DSG_GATHER_TABLE);
    }

    /**
     * Create an aliased <code>kylo.dsg_gather_table</code> table reference
     */
    public DsgGatherTable(Name alias) {
        this(alias, DSG_GATHER_TABLE);
    }

    private DsgGatherTable(Name alias, Table<DsgGatherTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private DsgGatherTable(Name alias, Table<DsgGatherTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("采集表信息"));
    }

    public <O extends Record> DsgGatherTable(Table<O> child, ForeignKey<O, DsgGatherTableRecord> key) {
        super(child, key, DSG_GATHER_TABLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Kylo.KYLO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DSG_GATHER_TABLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DsgGatherTableRecord> getPrimaryKey() {
        return Keys.KEY_DSG_GATHER_TABLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DsgGatherTableRecord>> getKeys() {
        return Arrays.<UniqueKey<DsgGatherTableRecord>>asList(Keys.KEY_DSG_GATHER_TABLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DsgGatherTable as(String alias) {
        return new DsgGatherTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DsgGatherTable as(Name alias) {
        return new DsgGatherTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DsgGatherTable rename(String name) {
        return new DsgGatherTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DsgGatherTable rename(Name name) {
        return new DsgGatherTable(name, null);
    }
}
