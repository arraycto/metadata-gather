/*
 * This file is generated by jOOQ.
 */
package org.poem.entities.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.poem.entities.Indexes;
import org.poem.entities.Keys;
import org.poem.entities.Kylo;
import org.poem.entities.tables.records.DsgGatherStatisticsRecord;


/**
 * 采集表信息
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DsgGatherStatistics extends TableImpl<DsgGatherStatisticsRecord> {

    private static final long serialVersionUID = -415158464;

    /**
     * The reference instance of <code>kylo.dsg_gather_statistics</code>
     */
    public static final DsgGatherStatistics DSG_GATHER_STATISTICS = new DsgGatherStatistics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DsgGatherStatisticsRecord> getRecordType() {
        return DsgGatherStatisticsRecord.class;
    }

    /**
     * The column <code>kylo.dsg_gather_statistics.id</code>. id
     */
    public final TableField<DsgGatherStatisticsRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "id");

    /**
     * The column <code>kylo.dsg_gather_statistics.gather_info_id</code>. 元数据信息, 和任务在一起
     */
    public final TableField<DsgGatherStatisticsRecord, String> GATHER_INFO_ID = createField("gather_info_id", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "元数据信息, 和任务在一起");

    /**
     * The column <code>kylo.dsg_gather_statistics.gather_db_count</code>. 抓取的数据库数量
     */
    public final TableField<DsgGatherStatisticsRecord, Integer> GATHER_DB_COUNT = createField("gather_db_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "抓取的数据库数量");

    /**
     * The column <code>kylo.dsg_gather_statistics.gather_table_count</code>. 抓取的表的个数
     */
    public final TableField<DsgGatherStatisticsRecord, Integer> GATHER_TABLE_COUNT = createField("gather_table_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "抓取的表的个数");

    /**
     * The column <code>kylo.dsg_gather_statistics.gather_field_count</code>. 抓取的表列的个数
     */
    public final TableField<DsgGatherStatisticsRecord, Integer> GATHER_FIELD_COUNT = createField("gather_field_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "抓取的表列的个数");

    /**
     * The column <code>kylo.dsg_gather_statistics.create_time</code>.
     */
    public final TableField<DsgGatherStatisticsRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>kylo.dsg_gather_statistics.update_time</code>.
     */
    public final TableField<DsgGatherStatisticsRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>kylo.dsg_gather_statistics</code> table reference
     */
    public DsgGatherStatistics() {
        this(DSL.name("dsg_gather_statistics"), null);
    }

    /**
     * Create an aliased <code>kylo.dsg_gather_statistics</code> table reference
     */
    public DsgGatherStatistics(String alias) {
        this(DSL.name(alias), DSG_GATHER_STATISTICS);
    }

    /**
     * Create an aliased <code>kylo.dsg_gather_statistics</code> table reference
     */
    public DsgGatherStatistics(Name alias) {
        this(alias, DSG_GATHER_STATISTICS);
    }

    private DsgGatherStatistics(Name alias, Table<DsgGatherStatisticsRecord> aliased) {
        this(alias, aliased, null);
    }

    private DsgGatherStatistics(Name alias, Table<DsgGatherStatisticsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("采集表信息"));
    }

    public <O extends Record> DsgGatherStatistics(Table<O> child, ForeignKey<O, DsgGatherStatisticsRecord> key) {
        super(child, key, DSG_GATHER_STATISTICS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Kylo.KYLO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DSG_GATHER_STATISTICS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DsgGatherStatisticsRecord> getPrimaryKey() {
        return Keys.KEY_DSG_GATHER_STATISTICS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DsgGatherStatisticsRecord>> getKeys() {
        return Arrays.<UniqueKey<DsgGatherStatisticsRecord>>asList(Keys.KEY_DSG_GATHER_STATISTICS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DsgGatherStatistics as(String alias) {
        return new DsgGatherStatistics(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DsgGatherStatistics as(Name alias) {
        return new DsgGatherStatistics(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DsgGatherStatistics rename(String name) {
        return new DsgGatherStatistics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DsgGatherStatistics rename(Name name) {
        return new DsgGatherStatistics(name, null);
    }
}
